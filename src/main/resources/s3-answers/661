  \ \_\ .----------.     /
   \   (  ||MARS||  )   /..
|\  \   ~-||====||-~_  ///\\
| \  \    ||    || // /((()))
 \|  |    ||====|| ~ / \\\///
     |__  ||    ||   |  `|''
     | |\ ||====||___|  _|_
     | | \`'    `/ | |  =O=
   V | |C|_ `   /  | |   ~
   E | |E||\___/   | |_ J
 _ N | |R|| ___    | |_]U
| |U | |E|l/:::\   | |  P
|/ S | |S|::::::\  | |  I
     | | /:::::::\ | |  T
     |_|/:::::::::\|_|  E
  /|/|:.:.:.:.:.:.:.:|  R
 | / |.:.:.:.:.:.:.:.|
 |/| /....READ.......\ |\
   |/.......THE.......\ \|
   /. . . . . LOGS . . .\
  /. . . . . . . . . . .\
You have unchained the torch and keep walking inside the maze. 
You see in front of you many paths, and each hallway has a sign: 
 1. Jupiter
 2. Ceres
 3. Mars
 4. Venus
You can go through a hallway you choose, and each one holds a mystery.
Some will have traps, and one of them holds a secret treasure!
Keep walking in each way by sending the sign's initial letter with the direction. 

          [_W_]   
     [_A_][_S_][_D_]

W - forward , S - backword
D - Turn right, A - Turn Left

For example: To go into Mars attic -> M-W.  
Modify your stream to use Keyed Stream